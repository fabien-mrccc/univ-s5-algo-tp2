package RandomTrees;

import Graph.Graph;
import Graph.Edge;
import Graph.DirectedEdge;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;

public class AldousBroder {

    /**
     * Generates a spanning tree using the Aldous-Broder algorithm.
     *
     * @param graph The input graph for which the spanning tree is to be generated.
     * @return An ArrayList of Edges representing the spanning tree generated by the Aldous-Broder algorithm.
     */
    public static ArrayList<Edge> generateRandomTree(Graph graph) {
        Random random = new Random();
        Set<Integer> visited = new HashSet<>();
        ArrayList<Edge> spanningTree = new ArrayList<>();

        int currentVertex = random.nextInt(graph.order());
        visited.add(currentVertex);

        while (visited.size() < graph.order()) {
            ArrayList<DirectedEdge> outgoingEdges = graph.outEdges(currentVertex);

            DirectedEdge chosenEdge = outgoingEdges.get(random.nextInt(outgoingEdges.size()));
            int targetVertex = chosenEdge.getDestination();

            if (!visited.contains(targetVertex)) {
                spanningTree.add(chosenEdge.getSupport());
                visited.add(targetVertex);
            }

            currentVertex = targetVertex;
        }

        return spanningTree;
    }
}
